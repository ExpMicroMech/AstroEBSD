%% Preamble
% TKD_HDR_Pattern.m - a script in AstroEBSD Package to generate a fused
% high dynamic range on-axis transmission kikuchi diffraction pattern (TKP)
%
% Originally scripted by Tianbi Zhang in November 2022 with major rework in 
% April 2023 (structure and variables) and June 2023 (functions)
% Annotated in April-June 2023
% For how this script works, please refer to our paper
% 
% Pre-requisite: MATLAB Image Processing & Statistics and Machine Learning
% Toolbox, Signal Processing Toolbox
%
% Additional requisites (does not affect this code, but helps you check
% file structure of the h5)
% (a) h5 file viewer to check h5 file structure
% (b) A few new functions, especially yaxis rotation, is optimized in
% MATLAB R2023a. Not using this version though should not affect its
% functionality.
%
% Inputs: on-axis transmission Kikuchi patterns captured by a TimePIX3
% direct detector in .h5 format. The patterns can be saved as individual
% frames within a single .h5 file, or as a single integrated frame. There
% are two different functions to import the data to the workspace.
%
% Outputs: fused high dynamic range pattern (raw and flatfielded), 
% corresponding 2D FFT spectra (modulus) and assorted plots.
%
% The standard version of the script generates similar plots as Figure 3-5
% of the original paper (you will need a simulated pattern for Fig.5.)
%
% You can customize this script to produce other plots - please work on a
% copy of this code for your own pattern, and acknowledge the original 
% work if possible.
% Fig. 6-8 are generated by a separate reprojection code which can be found
% in the AstroEBSD repository as well.

%%
home;
close all;
clear;

%% Load astro
% location_astro='C:\Users\billy\Documents\GitHub\AstroEBSD_v2\'; %Change this to your AstroEBSD location
location_astro='C:\Users\benja\OneDrive\Documents\GitHub\AstroEBSD_v2';
run(fullfile(location_astro,'start_AstroEBSD.m'));

%% Settings
export_option = false; % select true if you want image outputs
multframe_option = false; % true if the data are stored in individual frames within a h5 file
multframe_num = 50; % the number of frames in a multi-frame h5 file, 
% or the number of frames integrated if your raw data is collected as sum of frames.

% InputUser.Astro_loc='C:\Users\billy\Documents\MATLAB\AstroEBSD_v2-live'; 
% run(fullfile(InputUser.Astro_loc,'start_AstroEBSD.m')); % run AstroEBSD

%% Initial PC info
DD = 10.535; %% CL in mm - you need to measure this in the SEM.
PCx = 136; %%PCx, PCy in pixel units - you can read from the image
PCy = 146; % 149

%Saturation of the camera, in counts
sat_index = 1022;

% I added an npix definition
npix = 254; % final dimension of the pattern (a square) in pixel units - we remove the edge two pixels, as they are larger than the rest

Settings_Cor.gfilt=1; %gaussian (high frequency filter) - 1 = on, 0 = off
%you can switch off the gaussian high pass filter if you need/want
Settings_Cor.gfilt_s=15; %low pass filter sigma, in pixels, e.g. remove things that vary bigger than 15 pixels
Settings_Cor.size = [npix, npix];
%% Import Data

% Change file path based on your settings
path1= 'C:\Users\benja\OneDrive\Documents\MATLAB\Al_HDR\Demo';
% path1= 'C:\Users\billy\OneDrive - UBC\PhD\TKD\Al_HDR\Demo';

% Please fill in the file names in decreasing order of exposure time. The
% file corresponding to the baseline exposure time t0 (the longest in the set) should be the 
% first one.
h5filenames = {'spot1_50f_01s.h5','spot1_50f_001s.h5', 'spot1_50f_0005s.h5','spot1_50f_0001s_Event.h5'}; 
sampleID =  ["0.1s Exposure", "0.01s Exposure", "0.005s Exposure", "0.001s Exposure"];

[rawdata,numfiles] = h5_pixet(h5filenames,path1,multframe_option,multframe_num);

% Signal Saturation Correction & Normalization
[fillingdomains, satdomains] = TKD_cor_saturated(rawdata,numfiles,sat_index); 
% added sat_index input in function dfefinition
% added satdomains in function output

[normalizeddata] = TKD_normalize(fillingdomains,rawdata,numfiles);

% note: for the "demo" data, due to a mistake in collection, the event and 
% iToT subframes are separated into 2 files. Thi resuslts in the extra 
% if-else on lines 17-23 of h5_pixet. For other data, you can just use line
% 19 and discard the rest of the sub if-loop.

%% Plot raw signal versus scattering angle
PC_TKD=[PCx/npix,1-PCy/npix,1000*DD/(55*npix)]; % TZ - I think this should be right - can you have a think whether this should be 256 of 254?

% Detector.screensize = npix;
[ TKD_Geometry ] = EBSP_Gnom( Settings_Cor, PC_TKD );

angle_matrix=atand(sqrt(TKD_Geometry.ypts_screen.^2+TKD_Geometry.xpts_screen.^2));
% angle_matrix(find(angle_matrix == min(angle_matrix(:)))) = 0;

% added 2 additional outputs so the fitted curve will pe properly plotted.
[normfactor, ref_curve] = TKD_referencecurvefit(rawdata,normalizeddata,angle_matrix,numfiles);

% Stitch the pattern
[fusedpattern] = TKD_patternfuse(rawdata,normalizeddata,fillingdomains);

%% Flat field
% normfactor = feval(fitresult2, angle_matrix);
normfactor = reshape(normfactor, [npix npix]);
fused_flat = fusedpattern ./ normfactor;

% If your fused pattern still shows uneven background, consider adding a
% Gaussian filter, for example:
fused_gaussian = imgaussfilt(fused_flat, 15);
fused_flat_gaus = fused_flat ./ fused_gaussian;
% Flat field using the fitted radial scattering profile
[fused_flat,fusedpattern,normfactor, ref_curve] = TKD_flatfield(rawdata,normalizeddata,angle_matrix,fillingdomains,numfiles);

% [fused_flat,Settings_Cor ] = EBSP_BGCor( fused_flat,Settings_Cor);
[~,Settings_Cor ] = EBSP_BGCor( fused_flat,Settings_Cor);
% This step is completely optional

%% Visualization and FFT

fused_fft = fft2(fusedpattern);
fused_flat_fft = fft2(fused_flat);
fused_gaus_fft = fft2(fused_flat_gaus);

figure;
subplot(2,2,1);
imagesc(fusedpattern); axis xy; axis image; colormap('gray');axis off;
title("Raw fused");
subplot(2,2,2);
imagesc(fused_flat); axis xy; axis image; colormap('gray');axis off;
title("Flattened fused");
subplot(2,2,3);
imagesc(log10(abs(fftshift(fused_fft)))); axis xy; axis image; colormap('gray');axis off;
subplot(2,2,4);
imagesc(log10(abs(fftshift(fused_flat_fft)))); axis xy; axis image; colormap('gray');axis off;

%% Assorted Plots

figure;
subplot(1,3,1); %Figure 1: raw data as a function of scattering angle
hold on;
for i=1:numfiles
scatter(angle_matrix(:), rawdata(:,i), 1, 'o', 'filled');
end
grid on;
xlabel("Scattering Angle (degrees)");
ylabel(["Event"; "Count"],'Rotation',0);
legend(sampleID);
subplot(1,3,2); %Figure 2: normalized data and the conformity to the reference curve
hold on;
for i=1:numfiles
scatter(angle_matrix(:), normalizeddata(:,i), 1, 'o', 'filled');
end
grid on;
xlabel("Scatter Angle (degrees)");
ylabel(["Weighted"; "Event"; "Count"],'Rotation',0);
% legend(sampleID);
subplot(1,3,3); %Figure 3: Plot fit with the reference curve
plot(angle_matrix(:), ref_curve,'.','Color',[0 0 1],'MarkerSize',10);
hold on;
plot(angle_matrix(:), normfactor(:),'-', 'LineWidth',2, 'Color',[1 0 0]);
legend('Reference Curve', 'Smoothed Reference Curve', 'Location', 'NorthEast');
% Label axes
xlabel( 'Scatter Angle (degree)', 'Interpreter', 'none' );
ylabel( ["Weighted"; 'Event'; 'Count'], 'Rotation',0);
grid on;

%% Export images: 16-bit TIFF

fusedpattern_16 = normalizeto16bit(fusedpattern);
fused_flat_16 = normalizeto16bit(fused_flat);
fused_gaus_16 = normalizeto16bit(fused_flat_gaus);

% note: below are log10 fft spectrum
fused_fft_16 = normalizeto16bit(log10(abs(fftshift(fused_fft))));
fused_flat_fft_16 = normalizeto16bit(log10(abs(fftshift(fused_flat_fft))));
fused_gaus_fft_16 = normalizeto16bit(log10(abs(fftshift(fused_gaus_fft))));


if export_option == true
    imwrite(uint16(flipud(fusedpattern_16)), fullfile(path1,'fused_raw.tif'));
    imwrite(uint16(flipud(fused_flat_16)), fullfile(path1,'fused_flat.tif'));
    imwrite(uint16(flipud(fused_gaus_16)), fullfile(path1,'fused_flat_gaus.tif'));
    
    imwrite(uint16(flipud(fused_fft_16)), fullfile(path1,'fused_raw_fft.tif'));
    imwrite(uint16(flipud(fused_flat_fft_16)), fullfile(path1,'fused_flat_fft.tif'));
    imwrite(uint16(flipud(fused_gaus_fft_16)), fullfile(path1,'fused_flat_gaus_fft.tif'));
end

%% Side scripts for other plots
%%% SideScript A: patterns vs exposure time (not normalized)
numpats = numfiles+1;
sampleID{end+1} = 'Raw fused';
%this will be exposure time longest to shortest, then fused

%% Figure: patterns at different exposure times, short to long, and gaussian
figure;
hold on;
for k=1:numfiles
pattern = reshape(rawdata(:,k),[254 254]);
subplot(1,numpats,k);
imagesc(pattern); axis xy; axis image; axis off; colormap('gray'); colorbar;
title(sampleID{k});
end
subplot(1,numpats, numpats);
imagesc(fusedpattern); axis xy; axis image; axis off; colormap('gray'); colorbar;
title(sampleID{end});

figure;
hold on;
for k=1:numfiles
pattern = reshape(rawdata(:,k),[254 254]);
pattern_gaus = pattern ./ normfactor;
pattern_gaus(satdomains{k})=0;

subplot(1,numpats,k);
imagesc(pattern_gaus); axis xy; axis image; axis off; colormap('gray');
end
subplot(1,numpats,numpats);
imagesc(fused_flat); axis xy; axis image; axis off; colormap('gray');

%% intensity histogram (not in the paper)
figure;
histogram(fusedpattern_16, 200,'EdgeColor','none','Normalization','count');
hold on;
histogram(fused_gaus_16, 200,'EdgeColor','none','Normalization','count');
xlabel("Normalized grayscale");
ylabel("Pixel count");
legend("Raw fused","Background corrected");
grid on;

%% angle contours + corrected intensity plot
f3 = figure;
h2 = axes; 
p2 = pPattern(fused_flat,TKD_Geometry);
h3 = axes;
[p3,h4] = contour(TKD_Geometry.xpts_screen,TKD_Geometry.ypts_screen,angle_matrix,[10 20 30 40 50],'ShowText','on', 'linewidth', 2);
set(h3,'color','none','visible','off','fontsize',22);
axis equal;
clabel(p3,h4,'color','yellow', 'fontsize',20);
set(h3,'ydir', 'normal');
linkaxes([h2 h3]);


figure;
plot(angle_matrix(:),fused_flat(:),'.','MarkerSize',10,'Color',"#77AC30");
xlabel("Scattering Angle (degrees)");
ylabel(["Corrected"; "Intensity"; "(a.u.)"], 'Rotation',0);
grid on;

%% filling zone contours (for easier visualization)
fillingcontour = zeros(254^2,1);

for i=1:numfiles
    fillingcontour(fillingdomains{i}) = i;
end

fillingcontour = reshape(fillingcontour, 254,254);

figure;
contour(fillingcontour);
axis xy; axis image;

%% Side Script 6: line profile across a band - need to plot corrected images
% and relative intensity; almost perfectly perpendicular profiling
% This section will not work if you don't have a simulated pattern as the reference.
% The simulated pattern for the demo pattern is included in the raw
% dataset.
newsampleID = sampleID;
newsampleID(end) = "Fused pattern";
extendedsampleID = newsampleID;
extendedsampleID(end+1) = "Simulated Pattern";

% read the simulated pattern
opts = delimitedTextImportOptions("NumVariables", 254, "Encoding", "UTF-8");
% Specify range and delimiter
opts.DataLines = [1, Inf];
opts.Delimiter = "\t";
opts.VariableNames = ["VarName1", "VarName2", "VarName3", "VarName4", "VarName5", "VarName6", "VarName7", "VarName8", "VarName9", "VarName10", "VarName11", "VarName12", "VarName13", "VarName14", "VarName15", "VarName16", "VarName17", "VarName18", "VarName19", "VarName20", "VarName21", "VarName22", "VarName23", "VarName24", "VarName25", "VarName26", "VarName27", "VarName28", "VarName29", "VarName30", "VarName31", "VarName32", "VarName33", "VarName34", "VarName35", "VarName36", "VarName37", "VarName38", "VarName39", "VarName40", "VarName41", "VarName42", "VarName43", "VarName44", "VarName45", "VarName46", "VarName47", "VarName48", "VarName49", "VarName50", "VarName51", "VarName52", "VarName53", "VarName54", "VarName55", "VarName56", "VarName57", "VarName58", "VarName59", "VarName60", "VarName61", "VarName62", "VarName63", "VarName64", "VarName65", "VarName66", "VarName67", "VarName68", "VarName69", "VarName70", "VarName71", "VarName72", "VarName73", "VarName74", "VarName75", "VarName76", "VarName77", "VarName78", "VarName79", "VarName80", "VarName81", "VarName82", "VarName83", "VarName84", "VarName85", "VarName86", "VarName87", "VarName88", "VarName89", "VarName90", "VarName91", "VarName92", "VarName93", "VarName94", "VarName95", "VarName96", "VarName97", "VarName98", "VarName99", "VarName100", "VarName101", "VarName102", "VarName103", "VarName104", "VarName105", "VarName106", "VarName107", "VarName108", "VarName109", "VarName110", "VarName111", "VarName112", "VarName113", "VarName114", "VarName115", "VarName116", "VarName117", "VarName118", "VarName119", "VarName120", "VarName121", "VarName122", "VarName123", "VarName124", "VarName125", "VarName126", "VarName127", "VarName128", "VarName129", "VarName130", "VarName131", "VarName132", "VarName133", "VarName134", "VarName135", "VarName136", "VarName137", "VarName138", "VarName139", "VarName140", "VarName141", "VarName142", "VarName143", "VarName144", "VarName145", "VarName146", "VarName147", "VarName148", "VarName149", "VarName150", "VarName151", "VarName152", "VarName153", "VarName154", "VarName155", "VarName156", "VarName157", "VarName158", "VarName159", "VarName160", "VarName161", "VarName162", "VarName163", "VarName164", "VarName165", "VarName166", "VarName167", "VarName168", "VarName169", "VarName170", "VarName171", "VarName172", "VarName173", "VarName174", "VarName175", "VarName176", "VarName177", "VarName178", "VarName179", "VarName180", "VarName181", "VarName182", "VarName183", "VarName184", "VarName185", "VarName186", "VarName187", "VarName188", "VarName189", "VarName190", "VarName191", "VarName192", "VarName193", "VarName194", "VarName195", "VarName196", "VarName197", "VarName198", "VarName199", "VarName200", "VarName201", "VarName202", "VarName203", "VarName204", "VarName205", "VarName206", "VarName207", "VarName208", "VarName209", "VarName210", "VarName211", "VarName212", "VarName213", "VarName214", "VarName215", "VarName216", "VarName217", "VarName218", "VarName219", "VarName220", "VarName221", "VarName222", "VarName223", "VarName224", "VarName225", "VarName226", "VarName227", "VarName228", "VarName229", "VarName230", "VarName231", "VarName232", "VarName233", "VarName234", "VarName235", "VarName236", "VarName237", "VarName238", "VarName239", "VarName240", "VarName241", "VarName242", "VarName243", "VarName244", "VarName245", "VarName246", "VarName247", "VarName248", "VarName249", "VarName250", "VarName251", "VarName252", "VarName253", "VarName254"];
opts.VariableTypes = ["double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double"];

% Specify file level properties
opts.ExtraColumnsRule = "ignore";
opts.EmptyLineRule = "read";
% Import the data
simpattern_table = fullfile(path1, 'sim_pattern.csv');

simpattern = readtable(simpattern_table, opts);
simpattern = table2array(simpattern);

simpattern = simpattern + 0.5; % offset to move the band intensities up
clear opts;

figure;
imagesc(simpattern); axis xy; axis image; colormap('gray'); axis off;

[line_1_x, line_1_y] = fitedge(28, 57, 34, 31); % these are read from the pattern manually
[line_2_x, line_2_y] = fitedge(200,222,167,178);

figure;
subplot(2,2,[1 3]);
hold on;
imagesc(fused_flat); axis xy; axis image; colormap('gray'); axis off;
hold on;
plot(line_1_x, line_1_y,'Color','cyan','LineWidth',2); 
plot(line_2_x, line_2_y,'Color','magenta','LineWidth',2); 
hold off;


for k=1:numfiles
thispattern = reshape(normalizeddata(:,k),[254 254]);
bgcorpattern = thispattern ./ normfactor;
subplot(2,2,2);
hold on;
lineprof1 = improfile(bgcorpattern, line_1_x, line_1_y, 'nearest');
plot(lineprof1,'LineWidth',2);
subplot(2,2,4);
hold on;
lineprof2 = improfile(bgcorpattern, line_2_x, line_2_y, 'nearest');
plot(lineprof2,'LineWidth',2);
end
subplot(2,2,2);
lineprof = improfile(fused_flat, line_1_x,line_1_y, 'nearest');
plot(lineprof,'LineWidth',2);
lineprof = improfile(simpattern, line_1_x,line_1_y, 'nearest');
plot(lineprof,'LineWidth',2);
legend(extendedsampleID);
grid on;
xlabel("Pixel Position");
ylabel("Corrected Intensity (a.u.)");
title("Line 1 (Cyan)");
subplot(2,2,4);
lineprof = improfile(fused_flat, line_2_x, line_2_y, 'nearest');
plot(lineprof,'LineWidth',2);
lineprof = improfile(simpattern, line_2_x-2,line_2_y, 'nearest');
plot(lineprof,'LineWidth',2);
legend(extendedsampleID);
grid on;
xlabel("Pixel Position");
ylabel("Corrected Intensity (a.u.)");
title("Line 2 (Magenta)");

%% Helper functions


% write a dead pixel correction program

function normalized_matrix = normalizeto1(matrix_in)
normalized_matrix = matrix_in - min(matrix_in(:)); % make the lowest 0
normalized_matrix = normalized_matrix ./ max(normalized_matrix(:)); % Normalize
end

function normalized_matrix = normalizeto16bit(matrix_in)
% normalized_matrix = matrix_in;
normalized_matrix = matrix_in - min(matrix_in(:)); % make the lowest 0
normalized_matrix = normalized_matrix ./ max(normalized_matrix(:)); % Normalize
normalized_matrix = uint16(normalized_matrix * (2^16 - 1)); % Convert to 16 bit
end

function [fitlinex, fitliney] = fitedge(x1,x2,y1,y2)
fitslope = (y2 - y1) / (x2 - x1);

fitlinex = linspace(x1,x2,(abs(x2 - x1) + 1));
fitliney = y1 + fitslope .* (fitlinex - x1);
end
